@using AnurStore.Domain.Enums
@model AnurStore.Application.RequestModel.CreateProductSaleViewModel

@{
    ViewData["Title"] = "Create Product Sale";
    Layout = "_DashboardLayout";
}

<div class="content-page">
    <div class="container-fluid">
        <div class="row">
            <!-- LEFT PANEL: Sale Cart -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Sale Cart</h5>
                    </div>
                    <div class="card-body">
                        <form method="post" action="/ProductSale/create-product-sale" id="saleForm">
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label class="form-label">Customer Name</label>
                                    <input type="text" name="CustomerName" class="form-control" placeholder="Walk-in customer (optional)" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Payment Method</label>
                                    <select name="PaymentMethod" class="form-select rounded-pill shadow-sm px-3" required>
                                        <option value="">-- Select Payment Method --</option>
                                        @foreach (var method in Enum.GetValues(typeof(PaymentMethod)))
                                        {
                                            <option value="@((int)method)">@method</option>
                                        }
                                    </select>
                                    <div class="invalid-feedback">
                                        Please select a payment method.
                                    </div>
                                </div>

                            </div>

                            <table class="table table-bordered text-center align-middle" id="cartTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Product</th>
                                        <th>Unit Type</th>
                                        <th>Qty</th>
                                        <th>Subtotal</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>

                            <div class="text-end mt-2 fw-bold text-success fs-5">
                                Total: ₦<span id="totalPayable">0.00</span>
                            </div>

                            <div class="row mt-3">
                                <div class="col-md-6">
                                    <label class="form-label">Discount (₦)</label>
                                    <input type="number" name="Discount" class="form-control" />
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Created By</label>
                                    <input type="text" name="CreatedBy" class="form-control" value="AdminUser" readonly />
                                </div>
                            </div>

                            <input type="hidden" name="SaleRequestJson" id="SaleRequestJson" />

                            <div class="mt-4 text-end">
                                <button type="submit" class="btn btn-success px-4">Complete Sale</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- RIGHT PANEL: Product Grid -->
            <div class="col-lg-6">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <input id="searchBox" class="form-control w-75" placeholder="Search product by name..." />
                        <button class="btn btn-secondary ms-2"><i class="ri-barcode-line"></i></button>
                    </div>
                    <div class="card-body" style="min-height: 400px; overflow-y: auto;">
                        <div class="row" id="productGrid">
                            @foreach (var product in Model.AvailableProducts)
                            {
                                var productDisplayName = product.Name;
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100 text-center p-2 product-card">
                                        <img src="@product.ProductImageUrl" class="img-fluid" style="height:100px; object-fit:contain;" />
                                        <h6 class="mt-2 text-truncate" title="@productDisplayName">@productDisplayName</h6>
                                        <span class="badge bg-success mb-2">₦@product.UnitPrice?.ToString("N2")</span>
                                        <button type="button" class="btn btn-sm btn-primary w-100 add-to-cart-btn"
                                                data-product='@Html.Raw(System.Text.Json.JsonSerializer.Serialize(product))'>
                                            Add
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script>
        let cartItems = [];

        function renderCart() {
            const tbody = document.querySelector("#cartTable tbody");
            tbody.innerHTML = "";
            let total = 0;

            cartItems.forEach((item, index) => {
                let subtotal = 0;
                const qty = item.Quantity;

                switch (item.ProductUnitType) {
                    case 1: subtotal = (item.PricePerPack || 0) * qty; break;
                    case 2: subtotal = (item.UnitPrice || 0) * qty; break;
                    case 3: subtotal = ((item.PricePerPack || 0) / 2) * qty; break;
                    case 4: subtotal = ((item.PricePerPack || 0) / 4) * qty; break;
                }

                item.SubTotal = subtotal;
                total += subtotal;

                const productName = item.Name;

                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${productName}</td>
                    <td>
                        <select class="form-select form-select-sm unit-type-select" data-index="${index}">
                            <option value="1" ${item.ProductUnitType === 1 ? "selected" : ""}>Pack</option>
                            <option value="2" ${item.ProductUnitType === 2 ? "selected" : ""}>Single</option>
                            <option value="3" ${item.ProductUnitType === 3 ? "selected" : ""}>Half</option>
                            <option value="4" ${item.ProductUnitType === 4 ? "selected" : ""}>Quarter</option>
                        </select>
                    </td>
                    <td><input type="number" min="1" value="${qty}" class="form-control form-control-sm quantity-input" data-index="${index}" /></td>
                    <td>₦${subtotal.toFixed(2)}</td>
                    <td><button type="button" class="btn btn-sm btn-danger remove-btn" data-index="${index}">×</button></td>
                `;
                tbody.appendChild(row);
            });

            document.getElementById("totalPayable").textContent = total.toFixed(2);
        }

        $(document).on("click", ".add-to-cart-btn", function () {
            const productRaw = $(this).data("product");
            const product = typeof productRaw === "string" ? JSON.parse(productRaw) : productRaw;

            const id = product.Id || product.id;
            const name = product.Name || product.name;

            const existing = cartItems.find(p => p.ProductId === id);
            if (existing) {
                existing.Quantity += 1;
            } else {
                cartItems.push({
                    ProductId: id,
                    Name: name,
                    UnitPrice: product.UnitPrice ?? product.unitPrice ?? 0,
                    PricePerPack: product.PricePerPack ?? product.pricePerPack ?? 0,
                    TotalItemInPack: product.TotalItemInPack ?? product.totalItemInPack ?? 1,
                    Size: product.Size ?? product.size ?? "",
                    UnitName: product.UnitName ?? product.unitName ?? "",
                    BrandName: product.BrandName ?? product.brandName ?? "",
                    Quantity: 1,
                    ProductUnitType: 1,
                    SubTotal: 0,
                    CreatedBy: "AdminUser"
                });
            }

            renderCart();
        });

        $(document).on("click", ".remove-btn", function () {
            const index = parseInt($(this).data("index"));
            cartItems.splice(index, 1);
            renderCart();
        });

        // ✅ Quantity input uses "input" to update in real-time
        document.addEventListener("input", function (e) {
            if (e.target.classList.contains("quantity-input")) {
                const index = parseInt(e.target.dataset.index);
                const newQty = parseInt(e.target.value) || 0;
                cartItems[index].Quantity = newQty;

                const item = cartItems[index];
                let subtotal = 0;

                switch (item.ProductUnitType) {
                    case 1: subtotal = (item.PricePerPack || 0) * newQty; break;
                    case 2: subtotal = (item.UnitPrice || 0) * newQty; break;
                    case 3: subtotal = ((item.PricePerPack || 0) / 2) * newQty; break;
                    case 4: subtotal = ((item.PricePerPack || 0) / 4) * newQty; break;
                }

                item.SubTotal = subtotal;

                const row = e.target.closest("tr");
                row.querySelector("td:nth-child(4)").textContent = `₦${subtotal.toFixed(2)}`;

                const total = cartItems.reduce((sum, p) => sum + p.SubTotal, 0);
                document.getElementById("totalPayable").textContent = total.toFixed(2);
            }
        });

        // ✅ Unit type still handled with "change"
        document.addEventListener("change", function (e) {
            if (e.target.classList.contains("unit-type-select")) {
                const index = parseInt(e.target.dataset.index);
                cartItems[index].ProductUnitType = parseInt(e.target.value);
                renderCart(); // Full re-render OK for unit change
            }
        });

        $('#searchBox').on('input', function () {
            let term = $(this).val();
            if (term.length < 2) return;

            $.ajax({
                url: '/ProductSale/search-products',
                type: 'GET',
                data: { term: term },
                success: function (data) {
                    updateProductGrid(data);
                },
                error: function () {
                    alert("Failed to fetch products.");
                }
            });
        });

        function updateProductGrid(products) {
            let grid = $('#productGrid');
            grid.empty();

            if (!products || products.length === 0) {
                grid.append('<div class="col-12 text-center"><p>No products found</p></div>');
                return;
            }

            products.forEach(product => {
                $.get(`/ProductSale/get-product-by-id?id=${product.id || product.Id}`, function (productDetails) {
                    const displayName = `${productDetails.name || productDetails.Name} - ${productDetails.size || productDetails.Size || ""}
                        ${productDetails.unitName || productDetails.UnitName || ""} (${productDetails.brandName || productDetails.BrandName || ""})`;

                    let html = `
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 text-center p-2 product-card">
                                <img src="${productDetails.productImageUrl || productDetails.ProductImageUrl || '/images/placeholder.png'}" class="img-fluid" style="height:100px; object-fit:contain;" />
                                <h6 class="mt-2 text-truncate" title="${displayName}">${displayName}</h6>
                                <span class="badge bg-success mb-2">₦${(productDetails.unitPrice || productDetails.UnitPrice || 0).toLocaleString()}</span>
                                <button type="button" class="btn btn-sm btn-primary w-100 add-to-cart-btn"
                                    data-product='${JSON.stringify(productDetails).replace(/'/g, "&apos;")}'>
                                    Add
                                </button>
                            </div>
                        </div>`;
                    grid.append(html);
                });
            });
        }

        document.getElementById("saleForm").addEventListener("submit", function (e) {
            const saleRequest = {
                CustomerName: this.CustomerName.value,
                PaymentMethod: parseInt(this.PaymentMethod.value),
                Discount: parseFloat(this.Discount.value) || 0,
                CreatedBy: this.CreatedBy.value,
                ProductSaleItems: cartItems
            };

            document.getElementById("SaleRequestJson").value = JSON.stringify(saleRequest);
        });
    </script>
}
}